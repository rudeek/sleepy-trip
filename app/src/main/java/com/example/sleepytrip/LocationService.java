package com.example.sleepytrip;

import android.Manifest;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.location.Location;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.PowerManager;
import android.util.Log;

import androidx.annotation.Nullable;
import androidx.core.app.ActivityCompat;
import androidx.core.app.NotificationCompat;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationCallback;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationResult;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.location.Priority;

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class LocationService extends Service {

    private static final String CHANNEL_ID = "LocationServiceChannel";
    private static final String ALARM_CHANNEL_ID = "AlarmChannel";
    private FusedLocationProviderClient fusedLocationClient;
    private LocationCallback locationCallback;
    private AppDatabase db;
    private PowerManager.WakeLock wakeLock;

    // –•—Ä–∞–Ω–∏–º ID –ª–æ–∫–∞—Ü–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª –±—É–¥–∏–ª—å–Ω–∏–∫

    private Location currentUserLocation;

    // Handler –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π notification
    private Handler notificationUpdateHandler;
    private Runnable notificationUpdateRunnable;

    private static final Map<Integer, Boolean> triggeredAlarms = new ConcurrentHashMap<>();

    private final BroadcastReceiver resetReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if ("LOCATION_RESET".equals(intent.getAction())) {
                int locationId = intent.getIntExtra("LOCATION_ID", -1);

                if (locationId != -1) {
                    // ‚≠ê –£–¥–∞–ª—è–µ–º –∏–∑ triggeredAlarms
                    Boolean wasRemoved = triggeredAlarms.remove(locationId);

                    if (wasRemoved != null) {
                        Log.d("LocationService", "‚úÖ –°–±—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü–∏–∏ ID=" + locationId + " (–±—ã–ª–æ: " + wasRemoved + ")");
                    } else {
                        Log.w("LocationService", "‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è ID=" + locationId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ triggeredAlarms");
                    }

                    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    Log.d("LocationService", "üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤: " + triggeredAlarms.size());
                } else {
                    Log.e("LocationService", "‚ùå LOCATION_ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ broadcast!");
                }
            }
        }
    };

    @Override
    public void onCreate() {
        super.onCreate();

        // ‚≠ê –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º BroadcastReceiver
        IntentFilter filter = new IntentFilter("LOCATION_RESET");
        registerReceiver(resetReceiver, filter, Context.RECEIVER_NOT_EXPORTED);
        Log.d("LocationService", "‚úÖ BroadcastReceiver –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");

        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);
        db = AppDatabase.getInstance(this);

        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
        if (wakeLock == null) {
            wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "SleepyTrip::LocationWakeLock");
        }
        if (!wakeLock.isHeld()) {
            wakeLock.acquire(10 * 60 * 60 * 1000L);
        }

        createNotificationChannels();

        try {
            startForeground(1, createNotification("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", ""));
        } catch (Exception e) {
            Log.e("LocationService", "Foreground start failed", e);
        }

        startLocationTracking();
        startPeriodicNotificationUpdates();
    }

    // === –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï NOTIFICATION –ö–ê–ñ–î–´–ï 15 –°–ï–ö–£–ù–î ===
    private void startPeriodicNotificationUpdates() {
        notificationUpdateHandler = new Handler(Looper.getMainLooper());

        notificationUpdateRunnable = new Runnable() {
            @Override
            public void run() {
                // –û–±–Ω–æ–≤–ª—è–µ–º notification –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è
                if (currentUserLocation != null) {
                    updateNotificationWithDistance(currentUserLocation);
                    Log.d("LocationService", "üìç Notification –æ–±–Ω–æ–≤–ª–µ–Ω");
                }

                // –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
                notificationUpdateHandler.postDelayed(this, 15000);
            }
        };

        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        notificationUpdateHandler.postDelayed(notificationUpdateRunnable, 5000);
    }

    private void startLocationTracking() {
        LocationRequest locationRequest = new LocationRequest.Builder(
                Priority.PRIORITY_HIGH_ACCURACY,
                10000  // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        )
                .setMinUpdateIntervalMillis(5000)
                .setWaitForAccurateLocation(false)
                .setMaxUpdateDelayMillis(20000)
                .build();

        locationCallback = new LocationCallback() {
            @Override
            public void onLocationResult(LocationResult locationResult) {
                if (locationResult == null) return;

                Location location = locationResult.getLastLocation();
                if (location != null) {
                    currentUserLocation = location;
                    Log.d("LocationService", String.format("üìç –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: %.6f, %.6f (—Ç–æ—á–Ω–æ—Å—Ç—å: %.1fm)",
                            location.getLatitude(), location.getLongitude(), location.getAccuracy()));

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å (–±—É–¥–∏–ª—å–Ω–∏–∫)
                    checkProximity(location);
                }
            }
        };

        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                == PackageManager.PERMISSION_GRANTED) {

            fusedLocationClient.requestLocationUpdates(
                    locationRequest,
                    locationCallback,
                    Looper.getMainLooper()
            );

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            fusedLocationClient.getLastLocation()
                    .addOnSuccessListener(location -> {
                        if (location != null) {
                            currentUserLocation = location;
                            Log.d("LocationService", "‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞");
                            checkProximity(location);
                            updateNotificationWithDistance(location);
                        }
                    });
        }
    }

    private void updateNotificationWithDistance(Location currentLocation) {
        List<com.example.sleepytrip.Location> locations = db.locationDao().getActiveLocations();

        if (locations.isEmpty()) {
            NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
            if (manager != null) {
                manager.notify(1, createNotification("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π", "–í–∫–ª—é—á–∏—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"));
            }
            return;
        }

        com.example.sleepytrip.Location nearestLocation = null;
        float minDistance = Float.MAX_VALUE;

        for (com.example.sleepytrip.Location location : locations) {
            float[] results = new float[1];
            Location.distanceBetween(
                    currentLocation.getLatitude(),
                    currentLocation.getLongitude(),
                    location.getLatitude(),
                    location.getLongitude(),
                    results
            );

            float distance = results[0];
            if (distance < minDistance) {
                minDistance = distance;
                nearestLocation = location;
            }
        }

        if (nearestLocation != null) {
            String locationName = nearestLocation.getName();
            String distanceText;

            if (minDistance >= 1000) {
                distanceText = String.format(Locale.getDefault(), "%.1f –∫–º", minDistance / 1000);
            } else {
                distanceText = String.format(Locale.getDefault(), "%.0f –º", minDistance);
            }

            String title = "üìç " + locationName;
            String text;

            // –ï—Å–ª–∏ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            if (minDistance <= nearestLocation.getRadius()) {
                text = "üîî –í–´ –í –ó–û–ù–ï! " + distanceText;
            } else if (minDistance <= nearestLocation.getRadius() * 2) {
                text = "‚ö†Ô∏è –ë–ª–∏–∑–∫–æ –∫ –∑–æ–Ω–µ! " + distanceText;
            } else {
                text = "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " + distanceText;
            }

            NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
            if (manager != null) {
                manager.notify(1, createNotification(title, text));
            }
        }
    }

    private void checkProximity(Location currentLocation) {
        // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –ª–æ–∫–∞—Ü–∏–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
        List<com.example.sleepytrip.Location> allLocations = db.locationDao().getAllLocations();
        for (com.example.sleepytrip.Location location : allLocations) {
            if (!location.isActive() && triggeredAlarms.containsKey(location.getId())) {
                Log.d("LocationService", "üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ ID: " + location.getId());
                triggeredAlarms.remove(location.getId());
            }
        }

        // –ü–û–¢–û–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
        List<com.example.sleepytrip.Location> activeLocations = db.locationDao().getActiveLocations();

        Log.d("LocationService", "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏: –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π = " + activeLocations.size());

        for (com.example.sleepytrip.Location savedLocation : activeLocations) {
            Log.d("LocationService", "üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞—Ü–∏—é: " + savedLocation.getName() +
                    " (ID: " + savedLocation.getId() + ", Active: " + savedLocation.isActive() + ")");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ª–∏ —É–∂–µ –±—É–¥–∏–ª—å–Ω–∏–∫ –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
            Boolean hasTriggered = triggeredAlarms.get(savedLocation.getId());
            Log.d("LocationService", "  ‚è∞ –ë—É–¥–∏–ª—å–Ω–∏–∫ —É–∂–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª? " + hasTriggered);

            // –ï—Å–ª–∏ —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if (hasTriggered != null && hasTriggered) {
                Log.d("LocationService", "  ‚è≠Ô∏è –ë—É–¥–∏–ª—å–Ω–∏–∫ —É–∂–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                continue;
            }

            float[] results = new float[1];
            Location.distanceBetween(
                    currentLocation.getLatitude(),
                    currentLocation.getLongitude(),
                    savedLocation.getLatitude(),
                    savedLocation.getLongitude(),
                    results
            );

            float distance = results[0];
            Log.d("LocationService", "  üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " + distance + "–º, –†–∞–¥–∏—É—Å: " + savedLocation.getRadius() + "–º");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–¥–∏—É—Å
            if (distance <= savedLocation.getRadius()) {
                Log.w("LocationService",
                        "üö® –ë–£–î–ò–õ–¨–ù–ò–ö –°–†–ê–ë–û–¢–ê–õ! –î–∏—Å—Ç–∞–Ω—Ü–∏—è: " + distance + "–º, –†–∞–¥–∏—É—Å: " + savedLocation.getRadius() + "–º");

                // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –±—É–¥–∏–ª—å–Ω–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª
                triggeredAlarms.put(savedLocation.getId(), true);
                Log.d("LocationService", "‚úÖ ID " + savedLocation.getId() + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ triggeredAlarms");

                // –°–ù–ê–ß–ê–õ–ê notification (–±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ)
                showAlarmNotification(savedLocation);

                // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Activity
                new Handler(Looper.getMainLooper()).postDelayed(() -> {
                    showAlarmActivity(savedLocation);
                }, 500);
            }
        }
    }

    private void showAlarmNotification(com.example.sleepytrip.Location location) {
        Intent fullScreenIntent = new Intent(this, AlarmActivity.class);
        fullScreenIntent.putExtra("location_name", location.getName());
        fullScreenIntent.putExtra("location_address", location.getAddress());
        fullScreenIntent.putExtra("location_id", location.getId()); // ‚≠ê –î–û–ë–ê–í–¨–¢–ï ID
        fullScreenIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);

        PendingIntent fullScreenPendingIntent = PendingIntent.getActivity(
                this,
                999,
                fullScreenIntent,
                PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE
        );

        NotificationCompat.Builder builder = new NotificationCompat.Builder(this, ALARM_CHANNEL_ID)
                .setSmallIcon(android.R.drawable.ic_lock_idle_alarm)
                .setContentTitle("üîî –í–´ –ü–†–ò–ë–´–õ–ò!")
                .setContentText(location.getName())
                .setPriority(NotificationCompat.PRIORITY_MAX)
                .setCategory(NotificationCompat.CATEGORY_ALARM)
                .setAutoCancel(true)
                .setContentIntent(fullScreenPendingIntent)
                .setFullScreenIntent(fullScreenPendingIntent, true)
                .setVibrate(new long[]{0, 500, 200, 500})
                .setOngoing(false);

        NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
        if (notificationManager != null) {
            notificationManager.notify(999, builder.build());
            Log.d("LocationService", "üîî Alarm notification –ø–æ–∫–∞–∑–∞–Ω");
        }
    }

    private void showAlarmActivity(com.example.sleepytrip.Location location) {
        try {
            Intent intent = new Intent(this, AlarmActivity.class);
            intent.putExtra("location_name", location.getName());
            intent.putExtra("location_address", location.getAddress());
            intent.putExtra("location_id", location.getId()); // ‚≠ê –î–û–ë–ê–í–¨–¢–ï ID
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK |
                    Intent.FLAG_ACTIVITY_CLEAR_TASK |
                    Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
            startActivity(intent);
            Log.d("LocationService", "‚úÖ AlarmActivity –∑–∞–ø—É—â–µ–Ω–∞ —Å ID: " + location.getId());
        } catch (Exception e) {
            Log.e("LocationService", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AlarmActivity: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private Notification createNotification(String title, String text) {
        Intent notificationIntent = new Intent(this, MainActivity.class);
        PendingIntent pendingIntent = PendingIntent.getActivity(
                this,
                0,
                notificationIntent,
                PendingIntent.FLAG_IMMUTABLE
        );

        return new NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle(title)
                .setContentText(text)
                .setSmallIcon(android.R.drawable.ic_menu_mylocation)
                .setContentIntent(pendingIntent)
                .setOngoing(true)
                .setSound(null)
                .setOnlyAlertOnce(true)
                .setPriority(NotificationCompat.PRIORITY_LOW)
                .build();
    }

    private void createNotificationChannels() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationManager manager = getSystemService(NotificationManager.class);
            if (manager != null) {
                // Channel –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–ë–ï–ó –ó–í–£–ö–ê)
                NotificationChannel serviceChannel = new NotificationChannel(
                        CHANNEL_ID,
                        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π",
                        NotificationManager.IMPORTANCE_LOW
                );
                serviceChannel.setDescription("–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ª–æ–∫–∞—Ü–∏–π");
                serviceChannel.setSound(null, null);
                serviceChannel.enableVibration(false);
                serviceChannel.setShowBadge(false);
                manager.createNotificationChannel(serviceChannel);

                // Channel –¥–ª—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞ (–°–û –ó–í–£–ö–û–ú)
                NotificationChannel alarmChannel = new NotificationChannel(
                        ALARM_CHANNEL_ID,
                        "–ë—É–¥–∏–ª—å–Ω–∏–∫ –ø—Ä–∏–±—ã—Ç–∏—è",
                        NotificationManager.IMPORTANCE_HIGH
                );
                alarmChannel.setDescription("–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø—Ä–∏–±—ã—Ç–∏–∏ –∫ –ª–æ–∫–∞—Ü–∏–∏");
                alarmChannel.enableVibration(true);
                alarmChannel.setShowBadge(true);
                manager.createNotificationChannel(alarmChannel);
            }
        }
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        return START_STICKY;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();

        // ‚≠ê –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–ø–∏—Å–∫–∞ –æ—Ç BroadcastReceiver
        try {
            unregisterReceiver(resetReceiver);
            Log.d("LocationService", "‚úÖ BroadcastReceiver –æ—Ç–ø–∏—Å–∞–Ω");
        } catch (IllegalArgumentException e) {
            Log.w("LocationService", "‚ö†Ô∏è Receiver —É–∂–µ –±—ã–ª –æ—Ç–ø–∏—Å–∞–Ω");
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è notification
        if (notificationUpdateHandler != null && notificationUpdateRunnable != null) {
            notificationUpdateHandler.removeCallbacks(notificationUpdateRunnable);
            Log.d("LocationService", "‚úÖ Notification updates –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        if (fusedLocationClient != null && locationCallback != null) {
            fusedLocationClient.removeLocationUpdates(locationCallback);
            Log.d("LocationService", "‚úÖ Location updates –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        }

        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º WakeLock
        if (wakeLock != null && wakeLock.isHeld()) {
            wakeLock.release();
            Log.d("LocationService", "‚úÖ WakeLock –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω");
        }

        // –û—á–∏—â–∞–µ–º triggered alarms
        triggeredAlarms.clear();

        Log.d("LocationService", "üõë LocationService –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏—á—Ç–æ–∂–µ–Ω");
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
}